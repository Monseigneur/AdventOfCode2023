https://adventofcode.com/

Day 1:
    - part1: 2023-12-1 8:50 AM [54632, 517us] (92963)
    - part2: 2023-12-1 7:30 PM [54019, 2.77ms] (102643)

Day 2:
    - part1: 2023-12-1 9:28 PM [2416] (6497)
    - part2: 2023-12-1 10:05 PM [63307] (10611)

Day 3:
    - part1: 2023-12-5 10:56 PM [527369, 2.735ms] (106214), this one took a while
    - part2: 2023-12-6 8:05 PM [73074886, 90.672ms] (97735), this one was really hard

Day 4:
    - part1: 2023-12-6 8:27 PM [25010, 4.464ms] (107473), ez
    - part2: 2023-12-7 8:37 PM [9924412, 4.536ms] (99478), took a while to figure out
             the algo, and then writing it correctly.

Day 5:
    - part1: 2023-12-8 6:57 PM [993500720] (85634), hardest part was file parsing
    - part2: 2023-12-8 9:30 PM [4917124] (61012), easy, but my solution took 32 minutes since I
             am just brute-forcing it.

Day 6:
    - part1: 2023-12-9 5:50 PM [633080, 21.5us] (81922)
    - part2: 2023-12-9 6:03 PM [20048741, 5.8us] (80623), Overall easy

Day 7:
    - part1: 2023-12-9 8:14 PM [250898830, 3.3804ms] (67424), not too bad
    - part2: 2023-12-10 3:54 PM [252127335, 6.2509ms] (64505), also not too bad

Day 8:
    - part1: 2023-12-10 4:31 PM [12599, 3.6604ms] (67818), pretty easy
    - part2: 2023-12-10 6:35 PM [8245452805243, 103.06ms] (56513), felt like I cheated to get this, realized
             the LCM portion and calculated the result by hand for the first submission.

Day 9:
    - part1: 2023-12-10 8:09 PM [1969958987, 2.159ms] (55362), pretty easy, got stuck using usize at first
    - part2: 2023-12-10 8:38 PM [1068, 2.262ms]  (54661), pretty easy, just had to think the subtraction order

Day 10:
    - part1: 2023-12-14 9:11 PM [7086, 3.438ms] (54342), a lot of code, but not too hard once I figured out
             the right algorithm.
    - part2: 2023-12-17 8:55 PM [317, 10.036ms] (42249), the nastiest code I have ever written in this challenge.

Day 11:
    - part1: 2023-12-14 10:44 PM [9609130, 22.153ms] (48588), fairly easy, skipped Day 10 part 2 for this one.
    - part2: 2023-12-14 11:10 PM [702152204842, 21.534ms] (46676), really easy from part 1, just had to get the
             expansion math right.

Day 12:
    - part1: 2023-12-18 8:57 PM [7110, 15.53ms] (39691), the dirtiest crappiest algorithm you have ever seen.
             Updated to use the algorithm from part 2.
    - part2: 2023-12-22 8:55 PM [1566786613613, 256.977ms] (28012), I had to look at the subreddit to understand the
             algorithm. I did think about an edit distance algorithm, but I couldn't remember how to implement it or
             how to apply it here.

Day 13:
    - part1: 2023-12-15 7:42 PM [33520, 1.052ms] (33726), not too hard, but I feel like I have the wrong approach
    - part2: 2023-12-15 8:19 PM [34824, 3.461ms] (29438), I think I ruined the code to make it reuse, but not
             too bad.

Day 14:
    - part1: 2023-12-16 5:19 PM [113078, 608.8us] (34676), pretty easy, I realized the dynamic programming approach but
             took a bit to get it right.
    - part2: 2023-12-16 8:58 PM [94255, 148.214ms] (28707), this was much harder than I expected. First got stuck trying
             to write the code for all the directions and then found out it would take almost a day to run. I
             realized that there would be a cycle, but it took a long time to figure out how to determine where
             the cycle was.

Day 15:
    - part1: 2023-12-17 12:16 PM [517551, 622.1us] (35977), very easy.
    - part2: 2023-12-17 1:48 PM [286097, 3.336ms] (32635), also quite easy

Day 16:
    - part1: 2023-12-17 5:36 PM [7939, 9.644ms] (27390), not too bad once I realized how to stop the BFS.
    - part2: 2023-12-17 5:48 PM [8318, 2.325s] (26549), just applied the part1 algorithm in a loop around the edges.

Day 18:
    - part1: 2023-12-23 9:15 PM [76387, 505.3us] (26377), started off with a slow flood fill algorithm like in day 10.
             Updated to use the algorithm from part 2.
    - part2: 2023-12-28 7:59 PM [250022188522074, 640.3us] (23067), looked up an area algorithm and had to get it to work with
             the shape of this problem.

Day 19:
    - part1: 2023-12-23 12:25 PM [432427, 2.794ms] (25826), a lot of code, but rather simple.
    - part2: 2023-12-23 7:53 PM [143760172569135, 3.655ms] (19181), also a lot of code since I couldn't really reuse my part1
             solution for the most part. Took a while to figure out the bugs.

Day 20:
    - part1: 2023-12-30 4:24 PM [763500168, 70.279ms] (21264), a lot of code because I went too hard on the OO design.
    - part2: 2023-12-30 7:40 PM [207652583562007, 195.264] (16990), calculated it by hand first. Wrote the algorithm to
             calculate it for my input.

Day 21:
    - part1: 2023-12-24 12:53 PM [3830, 15.079ms] (21043), not too bad, realized a good approach fairly quickly.

Day 22:
    - part1: 2024-1-1 7:56 PM [465, 11.2ms] (15804), not too bad either, just had to think about the arrangements.

Day 24:
    - part1: 2023-12-27 8:39 PM [19523, 2.691 ms] (14104), just algebra, but I went the long way around.